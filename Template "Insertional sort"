	/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+INSERTION SORT WITH OR WITHOUT COMPARATOR-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
	template <class Iterator>
	void InsertionSort(Iterator first, Iterator last, sort_statist* sInfo = nullptr)
	{
		Iterator firstC, second;
		//1. Collection of start time and container size
		if (sInfo)
		{
			sInfo->restore();
			sInfo->size = distance(first, last);
			QueryPerformanceCounter(&sInfo->start);
		}

		//2. Sort
		firstC = first + 1;
		while (firstC != last)
		{
			second = firstC - 1;
			while (second >= first && *(second + 1) < *second)
			{
				swap(*(second + 1), *second);
				if (sInfo)
					sInfo->permutations++;
				second--;
			}
			firstC++;
		}

		//3. Collection of the end time and elapsed time of sort
		if (sInfo)
		{
			QueryPerformanceCounter(&sInfo->end);
			QueryPerformanceFrequency(&sInfo->freq);
			sInfo->elapsedTime = double(sInfo->end.QuadPart - sInfo->start.QuadPart) / sInfo->freq.QuadPart;
		}
	}

	template <class Iterator, class Compare>
	void InsertionSort(Iterator first, Iterator last, Compare comp,  sort_statist* sInfo = nullptr)
	{
		InputIterator firstC, second;
		//1. Collection of start time and container size
		if (sInfo)
		{
			sInfo->restore();
			sInfo->size = distance(first, last);
			QueryPerformanceCounter(&sInfo->start);
		}

		//2. Sort
		firstC = first + 1;
		while (firstC != last)
		{
			second = firstC - 1;
			while (second >= first && comp(*(second + 1), *second))
			{
				swap(*(second + 1), *second);
				if (sInfo)
					sInfo->permutations++;
				second--;
			}
			firstC++;
		}

		//3. Collection of the end time and elapsed time of sort
		if (sInfo)
		{
			QueryPerformanceCounter(&sInfo->end);
			QueryPerformanceFrequency(&sInfo->freq);
			sInfo->elapsedTime = double(sInfo->end.QuadPart - sInfo->start.QuadPart) / sInfo->freq.QuadPart;
		}
	}
