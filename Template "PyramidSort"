	/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+PYRAMID SORT WITH OR WITHOUT COMPARATOR-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
	template <class InputIterator>
	void PyramidSort(InputIterator first, InputIterator last, sort_statist* sInfo = nullptr)
	{
		size_t n, avg, i;

		//0. Get the container length and avg index
		n = distance(first, last);
		avg = n / 2 - 1;

		//Collection of start time and container size
		if (sInfo)
		{
			sInfo->restore();
			sInfo->size = distance(first, last);
			QueryPerformanceCounter(&sInfo->start);
		}

		//1. Sifting binary tree
		while (first + avg >= first)
		{
			Sifting(first, avg, n-1);
			avg--;
		}

		//2. Sort
		i = n - 1;
		while (first + i >= first+1)
		{
			swap(*(first + i), *first);
			Sifting(first, 0, i-1);
			i--;
		}

		//3. Collection of the end time and elapsed time of sort
		if (sInfo)
		{
			QueryPerformanceCounter(&sInfo->end);
			QueryPerformanceFrequency(&sInfo->freq);
			sInfo->elapsedTime = double(sInfo->end.QuadPart - sInfo->start.QuadPart) / sInfo->freq.QuadPart;
		}
	}

	template <class InputIterator, class Compare>
	void PyramidSort(InputIterator first, InputIterator last, Compare comp, sort_statist* sInfo = nullptr)
	{
		size_t n, avg, i;

		//0. Get the container length and avg index
		n = distance(first, last);
		avg = n / 2 - 1;

		//Collection of start time and container size
		if (sInfo)
		{
			sInfo->restore();
			sInfo->size = distance(first, last);
			QueryPerformanceCounter(&sInfo->start);
		}

		//1. Sifting binary tree
		while (first + avg >= first)
		{
			Sifting(first, avg, n - 1, comp);
			avg--;
		}

		//2. Sort
		i = n - 1;
		while (first + i >= first + 1)
		{
			swap(*(first + i), *first);
			Sifting(first, 0, i - 1, comp);
			i--;
		}

		//3. Collection of the end time and elapsed time of sort
		if (sInfo)
		{
			QueryPerformanceCounter(&sInfo->end);
			QueryPerformanceFrequency(&sInfo->freq);
			sInfo->elapsedTime = double(sInfo->end.QuadPart - sInfo->start.QuadPart) / sInfo->freq.QuadPart;
		}
	}
  
  //Sifting
  /*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+SIFTING WITH OR WITHOUT COMPARATOR-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
	template <class InputIterator>
	void Sifting(InputIterator lft, size_t root, size_t bottom)
	{
		size_t minIndex, i = root*2+1, j = root*2+2;
		bool terminated = false;

		while (!terminated && i <= bottom) //Пока индекс левого потомка меньше индекса дна массива 
		{
			if (i == bottom) //Если индекс левого потомка равен индексу дну массива
				minIndex = i;
			else if (*(lft + i) > *(lft + j)) //Если есть левый и правый потомки и левый больше правого
				minIndex = i;
			else
				minIndex = j; //Иначе, правый больше левого

			if (*(lft + root) < *(lft + minIndex)) //Если корневой узел меньше наименьшего помотка
			{
				swap(*(lft + root), *(lft + minIndex)); //Поменять их значения местами
				root = minIndex; //в качестве корня установить индекс наименьшего потомка
				i = root * 2 + 1; //Посчитать индекс левого потомка у нового корневого узла
				j = root * 2 + 2; //Посчитать индекс правого потомка у нового корневого узла
			}
			else  //Если корневой узел не меньше намиеньшего потомка - дальнейше просеиванеи не имеет смысла
				terminated = true;

		}
	}

	template <class InputIterator, class Compare>
	void Sifting(InputIterator lft, size_t root, size_t bottom, Compare comp)
	{
		size_t minIndex, i = root * 2 + 1, j = root * 2 + 2;
		bool terminated = false;

		while (!terminated && i <= bottom)
		{
			if (i == bottom)
				minIndex = i;
			else if (!comp(*(lft + i), *(lft + j)))
				minIndex = i;
			else
				minIndex = j;

			if (comp(*(lft + root),*(lft + minIndex)))
			{
				swap(*(lft + root), *(lft + minIndex));
				root = minIndex;
				i = root * 2 + 1;
				j = root * 2 + 2;
			}
			else
				terminated = true;

		}
	}
